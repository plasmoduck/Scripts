#!/bin/bash
#                               _
#  ___ _ __   ___ _ __ ___   __| |
# / __| '_ \ / __| '_ ` _ \ / _` |
# \__ | |_) | (__| | | | | | (_| |
# |___| .__/ \___|_| |_| |_|\__,_|
#     |_|
# Created by: spcmd
# http://spcmd.github.io
# https://github.com/spcmd

# features:
# - select media file from dmenu and play it with a mediaplayer
# - log the watched movies/tv shows to a journal file 
# - download subtitle if it's not available - requires periscope (https://github.com/patrickdessalle/periscope)
#
# To (re)generate the cache file automatically, autorun this command when X starts (e.g.: put in in your ~/.xinitrc):
#   [[ -x ~/path/to/dwatch ]] && sh ~/path/to/dwatch update &
#
# You can manually (re)generate the cache file by running `dwatch update` from the command line
# or typing :u <enter> in dwatch (dmenu)

# ===== Congfigurable options ======

[[ -f ~/.dmenurc ]] && source ~/.dmenurc || DMENU='dmenu -i -l 10'
date=$(date +"%Y-%m-%d-%H:%M")
dir=(~/Downloads ~/Videos)
watch_log=~/Documents/dwatch_journal
cache_file=/tmp/dwatch_cache
video_player="mpv"

# =================================

# Generate the cache file 
generate_cache() {

    # Remove old cache file if if exists
    [[ -e $cache_file ]] && rm "$cache_file"

    # Find mkv and mp4 files in the selected dirs
    find_files=$(find "${dir[@]}" \( -iregex ".+\.\(mkv\|mp4\)" ! -iname "sample.mkv" \) | awk -F/ '{print $NF}')

    readarray -t arr_files <<< "$find_files"

    for file in "${arr_files[@]}"; do
            # escape special chars in the filenames for grep
            escaped_filename=$(echo "$file" | sed -e 's/ /\ /g' -e 's/\[/\\[/g' -e 's/\]/\\]/g')
            if grep -q "$escaped_filename" "$watch_log"; then
                file=${file//*/\* $file}
            fi
            echo "$file" >> $cache_file
    done
}

# Main function
main() {
    # First: create the log file if it doesn't exist
    if [[ ! -e $watch_log ]]; then
        touch "$watch_log"
    fi

    # Second: Generate the cache file if it doesn't exist
    if [[ ! -e $cache_file ]]; then
        generate_cache;    
    fi

    select_from_list=$(sort "$cache_file" | $DMENU)
    escape_selected=$(echo "$select_from_list" | sed -e 's/ /\ /g' -e 's/\[/\\[/g' -e 's/\]/\\]/g' -e 's/\* //g')
    selected_file_path=$(find "${dir[@]}" -iname "$(echo "$escape_selected")")
    selected_dir_path=$(echo "$selected_file_path" | awk -F/ '{$NF=""; print}' OFS='/')
    find_subtitle=$(find "$selected_dir_path" -iname "*.srt" 2>/dev/null)

    if [[ ! -z $select_from_list ]]; then
        
        # Manually refresh the cache file
        if [[ $select_from_list = :u* ]]; then
            generate_cache;
            exit
        else
            # check in the log whether it's watched
            # if it's not, then log and mark it as watched
            check_log=$(grep "$escape_selected" $watch_log)
            if [[ -z $check_log ]]; then

                # log as watched
                echo "$date $select_from_list" | sed 's/\* //g'  >> $watch_log

                # mark as watched in the cache file
                sed -i "s|$escape_selected|* $escape_selected|" $cache_file

            fi

            # if a file was selected, then download a subtitle and/or play the file
            if [[ ! -z "$selected_file_path" ]]; then

                if [[ -z $find_subtitle ]]; then
                    download_subtitle=$(echo -e 'yes\nno' | $DMENU -p "Download subtitle?")
                    case "$download_subtitle" in
                        yes) periscope "$selected_file_path" && "$video_player" "$selected_dir_path";;
                        no) "$video_player" "$selected_file_path";;
                    esac
                else
                   "$video_player" "$selected_file_path"
                fi

            else
                exit
            fi
        fi
    else
        exit
    fi
}

case "$1" in
    update|--update|-u) generate_cache;;
    *) main;;
esac
