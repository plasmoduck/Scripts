#!/bin/bash
# A translator script with a simple history and a save to file function (dictionary), using Translate Shell (https://github.com/soimort/translate-shell)
# Based on: https://github.com/yahmanhu/Scripts/blob/master/gthu


# ------------------------------------------------------------------------------
# Configurable options
# ------------------------------------------------------------------------------
# Save history/wordlist to this file
file_wordlist="$HOME/Documents/kiszotarazott.txt"
# Auto save wordlist to the file on quit (set to "yes", if you want to enable this)
autosave_worldlist="yes"
# Separate the original word from the translations with this
separator=" : "
# Translate this language to this
lang="en:hu"
# ------------------------------------------------------------------------------


# Declare functions
showHist() {
    echo -e "History\n\nType the number of the word you want to translate. To quit history, type 'q' then hit enter.\n"
    # Iterate through all variables in the history array...
    for i in "${!TWORD[@]}"; do
        # ... and echo them pairing with their translations
        echo "$i ${TWORD[$i]}${separator}${TRANSLATIONS[$i]}"
    done
}

showHelp() {
    echo "HELP: Type one these and hit Enter:"
    echo "-----------------------------------------------------------------"
    echo " c         clear screen"
    echo " hist      show history"
    echo " w, x      manually save wordlist to the file (works in history)"
    echo " q         quit"
    echo " h         this help"
    echo "-----------------------------------------------------------------"
}

saveToFile() {
    for i in "${!TWORD[@]}"; do
        # check whether the word is already added to the file, if not, then add append it to the file
        grep "${TWORD[$i]}" $file_wordlist || echo "${TWORD[$i]}${separator}${TRANSLATIONS[$i]}" >> $file_wordlist
    done
    clear
    echo ">> Wordlist saved to: $file_wordlist"
}


# Declare arrays
declare -a TWORD
declare -a TRANSLATIONS


# If script got input arguments then translate them with translate-shell
if [[ $# -gt 0 ]]; then
    trans $lang $@
# If there isn't any input argument...
else

echo "Type 'h' and hit Enter for help"
# ... then start a loop and run the script until terminated
    while true; do

        # Ask for a phrase (or word) to look for
        read -p $'Next phrase:> ' phrase

        # If phrase is "c" (abbreviation for clear) script clears the terminal and continues the loop
        if [[ $phrase == "c" ]]; then

            clear
            continue

        # If phrase is "q" (abbreviation for exit), script exits the program by breaking the loop
        elif [[ $phrase == "q" ]]; then

            # if autosave is enabled, save the wordlist to the file
            if [[ $autosave_worldlist == "yes" ]]; then
                saveToFile;
            fi
            break

        # If phrase is "hist" script clears the terminal and jumps into history
        elif [[ $phrase == "hist" ]]; then
            clear
            showHist;

            # You can select from the list for further translations...
            read -p $'\nSelect: ' select

            phrase=${TWORD[$select]}

            # save the current wordlist to a text file
            if [[ $select == "w" || $select == "x" ]]; then

                saveToFile;
                continue

            # ... or exit history by typing "exit"
            elif [[ $select == "q" ]]; then

                clear
                continue

            fi

        # If phrase is "h" (abbreviation for help), shows the help and continues the loop
        elif [[ $phrase == "h" ]]; then

            showHelp;
            continue

        fi

        # Translate given phrase with Translate Shell
        # +remove some stuff and delete blank lines and leading whitespaces with sed
        # +get unique words with uniq
        # +join lines with paste
        # +add a space after each comma with sed
        output=$(trans -no-ansi -show-translation-phonetics n  -show-translation-phonetics n -show-languages n --show-original n -show-prompt-message n -show-alternatives n $lang $phrase | sed 's/adjective//;s/noun//;s/verb//;/^$/d;3~2d;s/^[ \t]*//' | uniq | paste -sd ',' | sed 's/,/, /g')
        echo -e "\n$output\n"

        # Add phrase to history array. If phrase is already on the list, then do nothing (prevent multiplicating same phrases).
        # Also add the translated words to the array
        if [[ ${TWORD[@]} =~ "$phrase" ]]; then
            :
        else
            TWORD+=("$phrase")
            TRANSLATIONS+=("$output")
        fi

    # End of loop
    done
fi
